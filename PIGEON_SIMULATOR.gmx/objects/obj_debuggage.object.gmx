<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_obj</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation obj debug
/**
 * Lancement manuel des ordres primitifs
 * 1- cliquer sur l'unité (last_clicked = unité)
 * 2- appuyer sur une touche de commande :
 *      1 : patrouille
 *      2 : deplacement
 *      3 : attaquer
 *      4 : todo...
 * 3- relacher la touche : l'ordre pars directement sur l'agent     
 
 */

last_clicked = noone; // dernier agent cliqué
current_instruction_key = noone;
Path = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Commandes souris et clavier
// drag &amp; drop actif : pas de touche enfoncée, clic gauche sur la cible
if last_clicked != noone &amp;&amp; !keyboard_check(vk_anykey) &amp;&amp; mouse_check_button(mb_left) &amp;&amp; position_meeting(mouse_x,mouse_y,last_clicked)
{
    last_clicked.x = mouse_x;
    last_clicked.y = mouse_y;
}

// Ordre validé : 
// si la dernière touche d'instruction n'est plus enfoncée, finaliser l'instruction et en chercher une nouvelle
if current_instruction_key != noone &amp;&amp; !keyboard_check(current_instruction_key){
    
    if(current_instruction_key ==  ord('1')){ // fin  deplacement
    
        Message = ds_map_create();// faire un message avec infos et l'envoyer
        ds_map_add(Message, "type", "order");
        ds_map_add(Message, "name", "move");
        ds_map_add(Message, "path", Path);
        ds_list_insert(last_clicked.Messages, 0, Message);
    }
    
    if(current_instruction_key ==  ord('2')){ // fin  path de patrouille
            
        
        
        Message = ds_map_create(); // demander patrouille classique
        ds_map_add(Message, "type", "order");
        ds_map_add(Message, "name", "patrol");
        ds_map_add(Message, "path", Path);
        ds_list_insert(last_clicked.Messages, 0, Message);      
        
        Message = ds_map_create(); // mais avant : demander deplacement en point d'origine
        ds_map_add(Message, "type", "order");
        ds_map_add(Message, "name", "move");
        var pathToStart = path_add();
        path_add_point(pathToStart, last_clicked.x, last_clicked.y, 20);
        path_add_point(pathToStart, path_get_x(Path, 0), path_get_y(Path, 0), 20);
        ds_map_add(Message, "path", pathToStart);
        ds_list_insert(last_clicked.Messages, 0, Message);
    }
    current_instruction_key = noone;    
}

if current_instruction_key == noone &amp;&amp; last_clicked != noone {
    // chercher une nouvelle touche d'instruction
    for (var i = ord('0'); i &lt; ord('9'); i++){
        if keyboard_check_pressed(i){
          current_instruction_key = i;
          
          if(current_instruction_key == ord('1')) { // deplacement simple
            Path = path_add();
            path_add_point(Path, last_clicked.x, last_clicked.y, 20); // destination, sera changé
          }
          
          if(current_instruction_key == ord('2')) { // ordre de patrouille
            Path = path_add(); // TODO : penser à path_destroy dans l'agent
          }          
          break; 
        }   
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fermer via Alt+F4
if keyboard_check(vk_alt)
    game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Commandes au clic gauche
// Cibler un nouvel agent ssi aucune action en cours
if current_instruction_key == noone {
    var hit = instance_position(mouse_x, mouse_y, obj_agent); // agent sous la souris
    
    if hit != noone show_debug_message("Agent selectionné");

    if hit == noone { // ou general sous la souris
        hit = instance_position(mouse_x, mouse_y, obj_general);
    }
    
    // cibler un agent pour les actions à la souris
    last_clicked = hit;   
    
    // ajout d'agent au clic : touche(s) enfoncée(s) et clic gauche dans une zone vide
    if keyboard_check(vk_anykey) &amp;&amp; hit == noone {
        show_debug_message("Ajout au clic");
    
        if keyboard_check(ord('S')){ // S : créer un agent
            instance_create(mouse_x,mouse_y,obj_agent);
            
            if keyboard_check(vk_control) // Ctrl + S : Créer 100 agents
                repeat (99) instance_create(mouse_x,mouse_y,obj_agent);
            
        }
    
        /*if keyboard_check(ord('G')){ // Placer un général
            instance_create(mouse_x,mouse_y,obj_general);
        } */
    }
} else {
    // Action en cours : current_instruction_key != noone
    if current_instruction_key == ord('1'){ // 1 : deplacement
        path_change_point(Path, 0, mouse_x, mouse_y, 10); // ecrase la destination
    }
    if current_instruction_key == ord('2'){ // 2 : patrouiller
        path_add_point(Path, mouse_x, mouse_y, 10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Supprime l'agent selectionné
var hit = instance_position(mouse_x, mouse_y, obj_agent);
if hit != noone
{
    with (hit) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
draw_text(mouse_x,mouse_y-10,fps_real);
draw_text(0, 0,  "Current instr. " + string(current_instruction_key));
draw_text(0, 10, "Last clicked : " + string(last_clicked));
draw_text(0, 20, "Path size : " + string(path_get_number(Path)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
