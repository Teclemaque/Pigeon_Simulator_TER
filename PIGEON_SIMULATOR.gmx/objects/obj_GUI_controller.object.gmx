<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.GUI = id;

display_set_gui_size(-1, -1);

/// génerer dimensions et panels
global.Dimensions = ds_map_create(); // il faut créer la map avant
global.Dimensions = get_ui_dimensions();

dimensions = global.Dimensions

// contrôle des clics
click_origin_x = noone;
click_origin_y = noone;
coordinates = noone;

// sub-panels
leftPanel = instance_create(0, 0, obj_leftPanel);
rightPanel= instance_create( dimensions[? "endx"], 0, obj_rightPanel );
topPanel = instance_create ( dimensions[? "startx"], 0, obj_topPanel);
toolbox = instance_create(   dimensions[? "startx"], dimensions[? "endy"], obj_toolbox )

Selection = ds_list_create(); // agents selectionnés

var size_l = room_width/global.MAP_Width
var size_h = room_height/global.MAP_Height
//show_debug_message("size_l : " + string(size_l))
//show_debug_message("size_h : " + string(size_h))
var w = obj_MAP_controller.width
var h = obj_MAP_controller.height

//show_debug_message("w : " + string(w))
//show_debug_message("h : " + string(h))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extraire targets ou coordonnées

var mx = window_views_mouse_get_x();
var my = window_views_mouse_get_y();

//show_debug_message("orig " + string(click_origin_x) + " : " + string(click_origin_x))
//show_debug_message("release " + string(mouse_x) + " : " + string(mouse_y))

process_rectangle_selection(); // Remplir laa Selection avec les agents qui sont dans le rectangle de selection



click_origin_x = noone;
click_origin_y = noone;

with ( instance_position( mouse_x_gui(), mouse_y_gui(), obj_btn_plus ) )
        {
            //show_debug_message( "GUI : clicked on " + object_get_name(object_index) );
            onBtnPlusClicked(id)
        }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ajouter coordonnées à la textBox

if( !keyboard_check_direct(vk_lcontrol)){

    //if(mouse_x == click_origin_x &amp;&amp; mouse_y == click_origin_y){
      coordinates = string(mouse_x) + ":" + string(mouse_y) + " ";
      //keyboard_string += coordinates; // todo : move to toolbox
      toolbox.coordinates = coordinates;
      toolbox.Text += coordinates;
      keyboard_string += coordinates;
      //var mouse_on_view_x = mouse_x &gt;= global.Dimensions[? "startx"] &amp;&amp; mouse_x &lt;= global.Dimensions[? "endx"]
      //var mouse_on_view_y = mouse_y &gt;= global.Dimensions[? "starty"] &amp;&amp; mouse_y &lt;= global.Dimensions[? "endy"]
      //if( mouse_on_view_x &amp;&amp; mouse_on_view_y ){ // clic dans la vue principale
      // todo : transmettre le clic à la main view
  //    show_debug_message("on view")
      
      //}
   // }
    
//    var left_in = mouse_x_gui() &gt; origin_x + global.Dimensions[? "startx"]
//    show_debug_message("left_in : " + string(left_in));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if( State == "selecting" ){

    click_origin_x = mouse_x;
    click_origin_y = mouse_y;

//    show_debug_message("verif orig " + string(click_origin_x) + " : " + string(click_origin_x))
    
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Highlight selected units
var color = c_red;
if ds_exists(Selection,ds_type_list)
    {
    if( !ds_list_empty(Selection) ){
        for(var i = 0; i &lt; ds_list_size(Selection); i++){
            var agent = ds_list_find_value(Selection, i);
            draw_agent_rectangle(agent, color)
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render selection rectangle

var size_l = room_width/global.MAP_Width
var size_h = room_height/global.MAP_Height
//view_hview[0]
//view_wview[0]

var mx = mouse_x
var my = mouse_y

if( click_origin_x != noone &amp;&amp; click_origin_y != noone ){
    draw_set_color(c_blue);
    draw_rectangle(click_origin_x, click_origin_y, mx, my, 1);
    draw_set_color(c_black);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug (désactivé)

return noone;
var dimensions = global.Dimensions;
var startx = dimensions[? "startx"];
var endx = dimensions[? "endx"];
var starty = dimensions[? "starty"];
var endy = dimensions[? "endy"];

draw_set_color(c_red);
draw_text(startx, starty, "main view")
draw_rectangle(startx, starty, endx, endy, 1);

//var origin_x = view_xview[view_current] + startx
var origin_x = view_xport[view_current] + startx
var origin_y = view_yport[view_current] + starty

draw_arrow(mouse_x_gui(),  mouse_y_gui(), origin_x, origin_y, 1)

draw_set_color(c_blue);
origin_x = view_xview[view_current] + startx
origin_y = view_yview[view_current] + starty
draw_arrow(mouse_x_gui(),  mouse_y_gui(), origin_x, origin_y, 1)

draw_set_color(c_yellow);
origin_x = view_xview[view_current] + view_xport[view_current] + startx -view_hborder[0]
origin_y = view_yview[view_current] + view_yport[view_current] + starty
draw_arrow(mouse_x_gui(),  mouse_y_gui(), origin_x, origin_y, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="45">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add selection to Text
if( ! ds_list_empty(Selection) ){
    for( var i = 0; i &lt; ds_list_size(Selection); i++ ){
        var agent = ds_list_find_value(Selection, i);
        if(instance_exists(agent)){
            var has_regiment = object_is_ancestor(agent.object_index, obj_meta_agent_C1) || object_is_ancestor(agent.object_index, obj_meta_agent_C2);
            if( instance_exists(agent) &amp;&amp; has_regiment ){
                var nom = nomGroupe(agent);// arg2 = withName
                if(string_length(nom) &gt; 1)
                    toolbox.Text += string(nom) + " ";
            }else { // Ne pas selectionner les agents simples (pas de Regiment)
                var agent_pos = ds_list_find_index(Selection, agent);
                ds_list_delete(Selection, agent_pos);
            }
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
