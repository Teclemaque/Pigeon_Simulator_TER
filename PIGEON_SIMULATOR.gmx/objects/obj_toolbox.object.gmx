<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>transparent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation de la ToolBar

General = find_general();
Targets = ds_list_create(); // cibles pour l'ordre à envoyer
State = "select_units"; // {select_units, select_order, select_coords}, état courant 
ActionKey = noone; // touche d'ordre enfoncée
Text = ""; // contenu de la text bar
Error = "''It's not a bug, it's a feature''";
Historic = ds_list_create(); // historique des derniers messages
historic_index = -1;
historic_size = 10; // taille de sauvegarde de l'historique
Cursor = "|";
click_origin_x = noone;
click_origin_y = noone;
coordinates = "";

alarm[0] =  room_speed;

// parametres du texte
font = fnt_toolbox;
text_length = string_length(Text + Cursor);
font_size = font_get_size(font);
row_height = font_size * 1.5;
draw_set_font(font);


// Parametres de la box
alpha_in= 1;
alpha_out = 0.6;
alpha = alpha_out;
padding = 16;

//boxwidth = room_width * 0.8;    // 80% de l'écran
//boxheight = 100;                // 100 pixels de haut
boxwidth = global.Dimensions[? "width"]
roomheight = room_height
boxheight = room_height - global.Dimensions[? "endy"]
x = global.Dimensions[? "startx"]
y = global.Dimensions[? "endy"]
//x = (room_width - boxwidth )/2;           // centré horizontalement
//y = room_height - boxheight - 2 * padding; // en bas + marge
//maxlength = boxwidth - 2 * padding;
image_xscale = boxwidth / sprite_width;
image_yscale = boxheight / sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capter l'entrée clavier
//Text = string(keyboard_string);


// todo : balancer dans le on vk_enter pressed
// Valider un message du textField
if (keyboard_check_pressed(vk_enter)){
    add_command_to_historic(Text, Historic, historic_size);
    var action = get_action_from_text(Text);
    ds_list_add(General.Ordres, action); // transmettre l'ordre structuré au général
    
    Text = "";
    historic_index = -1; // retour à la base de l'historique

}

// Afficher les unités selectionnées dans le textField
//if(ds_list_size(Targets) &gt; 0 ) show_message("Cibles en cours");
Text += get_targets_names(Targets);

keyboard_string = Text;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capter l'entrée clavier
//Text = string(keyboard_string);




// Afficher les unités selectionnées dans le textField
//if(ds_list_size(Targets) &gt; 0 ) show_message("Cibles en cours");
Text += get_targets_names(Targets);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// rendre transparent
alpha = alpha_out;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rendre opaque
alpha = alpha_in;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render textbox &amp; text
draw_set_alpha(alpha);
var savedColor = draw_get_colour();

// Rectangle plein
draw_set_font(font);
draw_set_color(c_gray);
draw_rectangle(x, y, x + boxwidth , y + boxheight, 0);

// Bordure externe
draw_set_color(c_black);
draw_rectangle(x, y, x + boxwidth, y + boxheight, 1);

// Bordure interne TextField
var textfield_x = x + padding;
var textfield_y = y + padding;

var maxlength = boxwidth - 2 * padding
text_width = string_width_ext(Text,font_size+(font_size/2), maxlength);
text_height = max(row_height, string_height_ext(Text,font_size+(font_size/2), maxlength));

// Rectangle de la zone de saisie
draw_rectangle( textfield_x,
                textfield_y ,
                textfield_x + boxwidth - 2 * padding,
                textfield_y + text_height + padding,
                1);

//image_xscale = 100;
// Texte
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text_ext
(
    x + 1.5 * padding,
    y + 1.5 * padding,
    Text + Cursor,// + string(sprite_width),
    row_height, // distance entre chaque ligne de texte
    maxlength // taille avant retour à la ligne
);

// Error message
draw_set_colour(c_red);
draw_text_ext
(
    x + 1.5 * padding,
    //y + 1.5 * padding + 
    textfield_y + text_height + 1.5 *  padding,
    Error,// + string(sprite_width),
    row_height, // distance entre chaque ligne de texte
    maxlength // taille avant retour à la ligne
);
/**/
draw_set_alpha(1);
draw_set_color(savedColor);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw debug
//draw_self()

/* //boundings debug
draw_set_color(c_red);
draw_rectangle(x-5, y-5, x + 5 ,y + 5, 0);

draw_set_color(c_blue);
draw_rectangle(x + sprite_width -5, y + sprite_height - 5, x + sprite_width + 5, y + sprite_height + 5, 0);
*/


draw_text(x, y - 2 * font_get_size(fnt_toolbox), "histo index : " + string(historic_index))
draw_text(x, y - 4 * font_get_size(fnt_toolbox), "State : " + State)
draw_text(x, y - 6 * font_get_size(fnt_toolbox), "cibles : " + string( ds_list_size(Targets) ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go down in commands historic

historic_index--;

if(historic_index &lt; 0){ // bas des messages : 
    Text = "";
    keyboard_string = Text;
    historic_index = -1;
}else {   
    Text = ds_list_find_value(Historic, historic_index);       
    keyboard_string = Text;
}

//show_debug_message("historic_index : " + string(historic_index));
//show_debug_message("Text : " + string(Text));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go up in commands historic

historic_index++;

if( historic_index &gt;=  ds_list_size(Historic)){
    historic_index =  ds_list_size(Historic) - 1;
}

if( historic_index &lt; 0 ){
    Text = ""; // todo ou ne rien faire
    keyboard_string = Text;
} else {
    Text = ds_list_find_value(Historic, historic_index);
    keyboard_string = Text;
//    show_debug_message("Nouvelle valeur : "+ string(Text));
}
     
//show_debug_message("historic_index : " + string(historic_index));
//show_debug_message("Text : " + string(Text));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// todo : balancer dans le on vk_enter pressed
// Valider un message du textField
if (keyboard_check_pressed(vk_enter)){
    add_command_to_historic(Text, Historic, historic_size);
    var action = get_action_from_text(Text);
    show_debug_message("TODO  transmettre au joueur");
//    ds_list_add(General.Ordres, action); // transmettre l'ordre structuré au général
    
    Text = "";
    historic_index = -1; // retour à la base de l'historique

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rentrer le texte

var c = keyboard_lastchar;

var alter =     keyboard_check_direct(vk_lalt)
            ||  keyboard_check_direct(vk_lcontrol)
            ||  keyboard_check_direct(vk_lshift)
            
if alter exit; // ne pas réagir sur un ALT/SHIFT/CTRL + quelque chose

var del = keyboard_check_released(vk_backspace);
if(del){
    var l = string_length(Text);
    
    if(l &gt; 0){
        Text = string_copy(Text, 0, l-1);
    }
    keyboard_lastkey = -1; // invalider la touche
}

var valid =    c &gt;= 'a' &amp;&amp; c &lt;= 'z' 
            || c &gt;= 'A' &amp;&amp; c &lt;= 'Z' 
            || c &gt;= '0' &amp;&amp; c &lt;= '9'
            || c &gt;= ' ' &amp;&amp; c &lt;= ';'

if valid
   {
   Text += keyboard_lastchar;   
   }
   
keyboard_lastkey = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
