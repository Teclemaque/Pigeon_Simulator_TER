<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_obj</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation de la ToolBar

General = find_general();
Targets = ds_list_create(); // cibles pour l'ordre à envoyer
State = "select_units"; // {select_units, select_order, select_coords}, état courant 
ActionKey = noone; // touche d'ordre enfoncée
Text = ""; // contenu de la text bar
Historic = ds_list_create(); // historique des derniers messages
historic_index = -1;
historic_size = 10; // taille de sauvegarde de l'historique
Cursor = "|";
click_origin_x = noone;
click_origin_y = noone;

alarm[0] =  room_speed;

// parametres du texte
font = fnt_toolbox;
text_length = string_length(Text + Cursor);
font_size = font_get_size(font);
row_height = font_size * 1.5;
draw_set_font(font);


// Parametres de la box
alpha_in= 1;
alpha_out = 0.6;
alpha = alpha_out;
padding = 16;

boxwidth = room_width * 0.8;    // 80% de l'écran
boxheight = 100;                // 100 pixels de haut
x = (room_width - boxwidth )/2;           // centré horizontalement
y = room_height - boxheight - 2 * padding; // en bas + marge
maxlength = boxwidth - 2 * padding;
image_xscale = boxwidth / sprite_width;
image_yscale = boxheight / sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Changer le curseur texte

if(Cursor == "|"){
    Cursor = "";
}else {
    Cursor = "|";
}

//show_debug_message("Text : " + Text + Cursor);

alarm[0] =  room_speed; // reprogrammer l'alarme
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capter l'entrée clavier
Text = string(keyboard_string);

// todo : balancer dans le on vk_enter pressed
// Valider un message du textField
if (keyboard_check_pressed(vk_enter)){
    add_command_to_historic(Text, Historic, historic_size);
    var action = get_action_from_text(Text);
    ds_list_add(General.Ordres, action); // transmettre l'ordre structuré au général
    
    Text = "";
    historic_index = -1; // retour à la base de l'historique
    
}

// Afficher les unités selectionnées dans le textField
Text += get_targets_names(Targets);

keyboard_string = Text;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extraire targets ou coordonnées

    Targets = collision_rectangle_list(
        click_origin_x, click_origin_y, 
        mouse_x, mouse_y, 
        obj_agent, 
        false, true);    
        
        if( ds_list_empty(Targets) ){
            if(mouse_x == click_origin_x &amp;&amp; mouse_y == click_origin_y){
              var coordinates = string(mouse_x) + ":" + string(mouse_y) + " ";
              keyboard_string += coordinates;
            }
        }

    click_origin_x = noone;
    click_origin_y = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if( State == "selecting" ){
    click_origin_x = mouse_x;
    click_origin_y = mouse_y;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// rendre transparent
alpha = alpha_out;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rendre opaque
alpha = alpha_in;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render textbox &amp; text
draw_set_alpha(alpha);
var savedColor = draw_get_colour();
//if (alpha &lt; 1) alpha += spd/10; else alpha = 1; // animation fadeIn

// Rectangle

draw_set_font(font);
draw_set_color(c_gray);
draw_rectangle(x,y,x+boxwidth,y+boxheight,0);

// Bordure externe
draw_set_color(c_black);
draw_rectangle(x,y,x+boxwidth,y+boxheight,1);

// Bordure interne TextField
var textfield_x = x + padding;
var textfield_y = y + padding;

text_width = string_width_ext(Text,font_size+(font_size/2), maxlength);
text_height = max(row_height, string_height_ext(Text,font_size+(font_size/2), maxlength));

//var textfield_height = row_height * 1 + ( round( text_length / maxlength ) );
draw_rectangle( textfield_x,
                textfield_y ,
                textfield_x + boxwidth - 2 * padding,
                textfield_y + text_height + padding,
                1);

//image_xscale = 100;
// Texte
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text_ext
(
    x + 1.5 * padding,
    y + 1.5 * padding,
    Text + Cursor,// + string(sprite_width),
    row_height, // distance entre chaque ligne de texte
    maxlength // taille avant retour à la ligne
);

draw_set_alpha(1);
draw_set_color(savedColor);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render selection rectangle

if( click_origin_x != noone ){
    draw_set_color(c_blue);
    draw_rectangle(click_origin_x, click_origin_y, mouse_x, mouse_y, 1);
    draw_set_color(c_black);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw debug
//draw_self()

draw_text(x, y - 2 * font_get_size(fnt_toolbox), "histo index : " + string(historic_index))
draw_text(x, y - 4 * font_get_size(fnt_toolbox), "State : " + State)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go down in commands historic

historic_index--;

if(historic_index &lt; 0){ // bas des messages : 
    Text = "";
    keyboard_string = Text;
    historic_index = -1;
}else {   
    Text = ds_list_find_value(Historic, historic_index);       
    keyboard_string = Text;
}

//show_debug_message("historic_index : " + string(historic_index));
//show_debug_message("Text : " + string(Text));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go up in commands historic

historic_index++;

if( historic_index &gt;=  ds_list_size(Historic)){
    historic_index =  ds_list_size(Historic) - 1;
}

if( historic_index &lt; 0 ){
    Text = ""; // todo ou ne rien faire
    keyboard_string = Text;
} else {
    Text = ds_list_find_value(Historic, historic_index);
    keyboard_string = Text;
//    show_debug_message("Nouvelle valeur : "+ string(Text));
}
     
//show_debug_message("historic_index : " + string(historic_index));
//show_debug_message("Text : " + string(Text));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Actions au clavier

switch(keyboard_key){
    case ord('1'):
        State = "select_order";
        ActionKey = 1        
        break;
    case ord('2'):
        State = "select_order";
        ActionKey = 2
        break;
    case ord('3'):
        State = "select_order";
        ActionKey = 3
        break;
    case ord('4'):
        State = "select_order";
        ActionKey = 4
        break;    
    default:
        ActionKey = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Todo : debugger
/*
if(State != "selecting" &amp;&amp; !keyboard_check_direct(vk_anykey)){
    State = "selecting"
    // Déclenché quand touche action relachée
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
