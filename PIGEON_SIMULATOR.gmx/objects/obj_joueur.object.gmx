<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soldat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_agent_C1</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Camp = 1;
ExecuteOrdre = noone;
Grade = 14;
Officiel = 1;
Name = obj_joueur;
Commandant = id;
Classe = 10; //General suprÃªme

Ordres = ds_list_create();

repeat(20)
    {
    A = instance_create(x+random(20)-10,y+random(20)-10,obj_messager_C1)
    A.Officier_sup = id;
    }
Messager = obj_messager_C1;
Renseignement = ds_list_create();
Regiment = ds_list_create();
RegimentAllie = ds_list_create();
RegimentEnnemi = ds_list_create();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(Regiment);
ds_list_destroy(RegimentAllie);
ds_list_destroy(RegimentEnnemi);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_icone_avatar.Avatar == 1
    {
    if keyboard_check(vk_space)
        {
        direction = point_direction(x,y,mouse_x,mouse_y);
        image_angle = direction;
        Z0 = map_get_height(0)
        VTerrain = Z0*2/100;
        speed = 2 - VTerrain;
        }
    else
        {
        speed = 0
        }
    }
else
    {
    speed = 0;
    }
    
if ds_list_size(Ordres) &gt; 0
    {
    ORDRES = ds_list_find_value(Ordres,0)
    show_debug_message("LES OOOOOOOOOOOOOOOOOOOOOOOOOOOOORES")
    for (i = 0; i &lt; array_length_1d(ORDRES);i++)
        {
        show_debug_message("OOOOOOOOOOOOOOOORDRES  "+string(ORDRES[i]));
        }
    Mess = instance_nearest(x,y,Messager); //Alors on cherche le messager le plus proche
    
    if instance_exists(Mess)
    &amp;&amp; distance_to_object(Mess) &lt;= 25
    &amp;&amp; Mess.Mission == 0 // Si le messager est suffisament proche et pas deja en mission
        {
        Mess.ArgumentMessager[] = 0;//On reinitialise son tableau contenant le parametre du message
        Mess.ArgumentMessager[0] = ORDRES[0];//On lui donne le destinaire
        Mess.ArgumentMessager[1] = "ORDRE";//On indique que le message est un ordre
        Mess.ArgumentMessager[2] = ORDRES[1];//L'ordre (le script)a transmettre
            
        for (i = 2; i &lt; array_length_1d(ORDRES);i++)
            {
            Mess.ArgumentMessager[i+1] = ORDRES[i];//Les parametre de l'odre (du script)
            }
        /* 
        Une fois que le tableau est comble (ici sa taille est de 6)
        On le place dans la saccoche du messager. La saccoche contient des tableaux
        1 tableau par message
        */
        ds_list_add(Mess.SaccocheMessage,Mess.ArgumentMessager)
        Mess.Message += 1;// On indique au messager qu'il a un new message
        // REMARQUE SI ON RAJOUTE UN NOUVEL ORDRE IL FAUT REINITIALISER ArgumentMessager[]
        // Sans quoi les valeurs sont fausses
        Mess.ArgumentMessager[] = 0;
        Mission = 1;
        
        with(Messager)
            {
            if ds_list_size(SaccocheMessage) &gt; 0
                {
                D = ds_list_find_value(SaccocheMessage,0)
                Dest = D[0]
                Execute = IA_Deplacement;
                Argument[0] = noone;
                Argument[1] = Dest;
                Argument[2] = noone;
                Argument[5] = -1;
                Argument[6] = -1;
                Argument[7] = MSpeed;
                Argument[8] = 0;
                Argument[9] = Alpha//round(random(8))+2;
                Argument[10] = 1;
                }
            }
        }
    ds_list_delete(Ordres, 0);
    }


Rens = ds_list_find_value(Renseignement,0)//ou 0

//for (j = 0; j &lt; array_length_1d(Rens); j++)
if is_array(Rens)
    {
    if ds_map_find_value(global.Regiments, Rens[1]) != undefined
        {
        Agent = ds_map_find_value(global.Regiments, Rens[1]);
        
        if instance_exists(Agent)
            {
            if ds_list_find_index(Regiment, Agent.Name) == -1
                {
                ds_list_add(Regiment, Agent.Name)
                }
                
            if Agent.Camp == Camp
                {
                if ds_list_find_index(RegimentAllie, Agent.Name) == -1
                    {
                    ds_list_add(RegimentAllie, Agent.Name)
                    }
                }
            else
                {
                if ds_list_find_index(RegimentEnnemi, Agent.Name) == -1
                    {
                    ds_list_add(RegimentEnnemi, Agent.Name)
                    }
                }
            
            if instance_exists(Agent.Jeton)
                {
                if Agent.Jeton.T &lt; Rens[5]
                    {
                    Agent.Jeton.T = Rens[5];
                    Agent.Jeton.Effectif = Rens[2];
                    Agent.Jeton.x = Rens[3];
                    Agent.Jeton.y = Rens[4];
                    show_debug_message(string(Rens[3])+" "+string(Rens[4]))
                    }
                }
            }
        }
    }
ds_list_delete(Renseignement,0)
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(x+20,y-30,ds_list_size(Renseignement))
draw_text(x+20,y-40,ds_list_size(Regiment))
draw_text(x+20,y-60,ds_list_size(RegimentAllie))
draw_text(x+20,y-80,ds_list_size(RegimentEnnemi))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ExecuteOrdre)
    {
    with(ExecuteOrdre)
        {
        Execute = IA_Repos;
        Argument[0] = 1;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ExecuteOrdre)
    {
    with(ExecuteOrdre)
        {
        if ORDRE != "GROUPE"
            {
            ORDRE = "GROUPE";
            ds_list_clear(Regiment);
            }
        /*else
            {
            ORDRE = "SEPARATION"
            ds_list_clear(Regiment);
            }*/
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(ExecuteOrdre)) // Si on a un soldat a qui remettre l'ordre
    {
    Messager = instance_nearest(x,y,obj_messager_C1); //Alors on cherche le messager le plus proche
    Messager.ArgumentMessager[] = 0;//On reinitialise son tableau contenant le parametre du message
    if distance_to_object(Messager) &lt;= 25
    &amp;&amp; Messager.Mission == 0 // Si le messager est suffisament proche et pas deja en mission
        {
        //ds_list_add(Messager.Destinataire,ExecuteOrdre);
        Messager.ArgumentMessager[0] = ExecuteOrdre;//On lui donne le destinaire
        Messager.ArgumentMessager[1] = "ORDRE";//On indique que le message est un ordre
        Messager.ArgumentMessager[2] = IA_Grade;//L'ordre (le script)a transmettre
        Messager.ArgumentMessager[3] = noone;//Les parametre de l'odre (du script)
        if (ExecuteOrdre.Officiel == 0){
                Messager.ArgumentMessager[4] = 1;
            }
            else{
                Messager.ArgumentMessager[4] = 0;
            }
        Messager.ArgumentMessager[5] = noone;
        // Une fois que le tableau est comble (ici sa taille est de 6)
        // On le place dans la saccoche du messager. La saccoche contient des tableaux
        // 1 tableau par message
        ds_list_add(Messager.SaccocheMessage,Messager.ArgumentMessager)
        Messager.Message += 1;// On indique au messager qu'il a un new message
        
        // REMARQUE SI ON RAJOUTE UN NOUVEL ORDRE IL FAUT REINITIALISER ArgumentMessager[]
        // Sans quoi les valeurs sont fausses
        Messager.ArgumentMessager[] = 0;
        Mission = 1;
        
        
        
        /*Messager.ArgumentMessager[] = 0;
        ds_list_add(Messager.Destinataire,ExecuteOrdre);
        Messager.ArgumentMessager[0] = IA_Deplacement;
        Messager.ArgumentMessager[1] = noone;
        Messager.ArgumentMessager[2] = obj_joueur;
        Messager.ArgumentMessager[3] = noone;
        Messager.ArgumentMessager[4] = -1;
        Messager.ArgumentMessager[5] = -1;
        Messager.ArgumentMessager[6] = -1//random(360);
        Messager.ArgumentMessager[7] = -1;
        Messager.ArgumentMessager[8] = random(ExecuteOrdre.MSpeed)+1;
        Messager.ArgumentMessager[9] = -1;
        Messager.ArgumentMessager[10] = ExecuteOrdre.Alpha;
        Messager.ArgumentMessager[11] = 1;
        
        ds_list_add(Messager.SaccocheMessage,Messager.ArgumentMessager)
        Messager.Message += 1;*/
        
        // On indique au messager ou il doit se rendre
        with(Messager)
            {
            D = ds_list_find_value(SaccocheMessage,0)
            Dest = D[0]
            Execute = IA_Deplacement;
            Argument[0] = noone;
            Argument[1] = Dest;
            Argument[2] = noone;
            Argument[5] = -1;
            Argument[6] = -1;
            Argument[7] = MSpeed;
            Argument[8] = 0;
            Argument[9] = Alpha//round(random(8))+2;
            Argument[10] = 1;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ExecuteOrdre)
    {
    with(ExecuteOrdre)
        {
        MODE = "GROUPE"
        Ordre = 2
        //L = ds_list_create()
        Execute = IA_Groupe//(id,0,1/2,1)
        List[0] = id;
        Argument[0] = List;
        Argument[1] = 0;
        Argument[2] = 1/2;
        Argument[3] = 1;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ExecuteOrdre)
    {
    t = random(9)
    with(ExecuteOrdre)
        {
        MODE = "ATTAQUE";
        //Execute = IA_Attaque
        ArgumentAttaque[0] = instance_nearest(x,y,Ennemi)
        if other.t &lt; 3
            {
            ArgumentAttaque[1] = 0;
            }
        else
            {
            if other.t &lt; 6
                {
                ArgumentAttaque[1] = 1;
                }
            else
                {
                ArgumentAttaque[1] = 2;
                }
            }
        ArgumentAttaque[2] = 2;
        ArgumentAttaque[3] = random(MSpeed);
        ArgumentAttaque[4] = -1;
        
        ArgumentRegiment = ArgumentAttaque;
        IA_Attaque();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ExecuteOrdre)
    {
    T = round(random(10));
    with(ExecuteOrdre)
        {
        //Ordre = 1
        Execute = IA_Deplacement;
        Argument[0] = noone;
        Argument[1] = noone;
        Argument[2] = noone;
        if other.T &lt; 5
            {
            Argument[3] = mouse_x;
            Argument[4] = mouse_y;
            Argument[5] = -1;
            }
        else
            {
            Argument[3] = -1;
            Argument[4] = -1;
            Argument[5] = point_direction(x,y,mouse_x,mouse_y);
            }
        
        Argument[6] = -1;
        Argument[7] = 2;
        Argument[8] = 0;
        Argument[9] = Alpha//round(random(8))+2;
        Argument[10] = 1;
        //path_finding_A(x, y, mouse_x, mouse_y, 16, 8, true, Obj_Terrain_montagne, true);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ExecuteOrdre)
    {
    with(ExecuteOrdre)
        {
        Execute = IA_Repos;
        Argument[1] = -1;
        Argument[0] = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
