<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.GUI = id;

/// génerer dimensions et panels
global.Dimensions = ds_map_create(); // il faut créer la map avant
global.Dimensions = get_ui_dimensions();

dimensions = global.Dimensions

// contrôle des clics
click_origin_x = noone;
click_origin_y = noone;
coordinates = noone;

// sub-panels
leftPanel = instance_create(0, 0, obj_leftPanel);
rightPanel= instance_create( dimensions[? "endx"], 0, obj_rightPanel );
topPanel = instance_create ( dimensions[? "startx"], 0, obj_topPanel);
toolbox = instance_create(   dimensions[? "startx"], dimensions[? "endy"], obj_toolbox )

Selection = ds_list_create(); // agents selectionnés

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extraire targets ou coordonnées

Selection = collision_rectangle_list(
    click_origin_x, click_origin_y, 
    mouse_x, mouse_y, 
    obj_agent, 
    false, true);
    
if( ds_list_empty(Selection) ){ // si clic simple dans le vide
    if(mouse_x == click_origin_x &amp;&amp; mouse_y == click_origin_y){
      coordinates = string(mouse_x) + ":" + string(mouse_y) + " ";
      //keyboard_string += coordinates; // todo : move to toolbox
      toolbox.coordinates = coordinates;
      toolbox.Text += coordinates 
      
      var mouse_on_view_x = mouse_x &gt;= global.Dimensions[? "startx"] &amp;&amp; mouse_x &lt;= global.Dimensions[? "endx"]
      var mouse_on_view_y = mouse_y &gt;= global.Dimensions[? "starty"] &amp;&amp; mouse_y &lt;= global.Dimensions[? "endy"]
      if( mouse_on_view_x &amp;&amp; mouse_on_view_y ){ // clic dans la vue principale
      // todo : transmettre le clic à la main view        
      }
    }
}

click_origin_x = noone;
click_origin_y = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if( State == "selecting" ){
    click_origin_x = mouse_x;
    click_origin_y = mouse_y;
    
    show_debug_message("Click orig : " + string(click_origin_x) + " : " + string(click_origin_y));
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render selection rectangle

if( click_origin_x != noone ){
    draw_set_color(c_blue);
    draw_rectangle(click_origin_x, click_origin_y, mouse_x, mouse_y, 1);
    draw_set_color(c_black);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug



var dimensions = global.Dimensions;
var startx = dimensions[? "startx"];
var endx = dimensions[? "endx"];
var starty = dimensions[? "starty"];
var endy = dimensions[? "endy"];

draw_set_color(c_black);
draw_text(startx, starty, "main view")
draw_rectangle(startx, starty, endx, endy, 1);

draw_set_color(c_yellow);
draw_text(startx, endy, "toolbox")
draw_rectangle(startx, endy, endx, room_height, 1);

draw_set_color(c_blue);
draw_text(0, 0, "left panel")
draw_rectangle(0, 0, startx, room_height, 1);

draw_set_color(c_green);
draw_text(endx, 0, "right panel")
draw_rectangle(endx, 0, room_width, endy, 1);

draw_set_color(c_purple);
draw_text(startx, 0, "top panel")
draw_rectangle(startx, 0, endx, starty, 1);

draw_set_color(c_olive);
draw_rectangle(endx, endy, room_width, room_height, 0);
draw_set_color(c_black);
draw_text(endx, endy, "minimap")

//draw_set_color(c_blue);
//draw_rectangle(x + sprite_width -5, y + sprite_height - 5, x + sprite_width + 5, y + sprite_height + 5, 0);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Highlight selected units
var color = c_red;
if( !ds_list_empty(Selection) ){
    for(var i = 0; i &lt; ds_list_size(Selection); i++){
        var agent = ds_list_find_value(Selection, i);
        draw_agent_rectangle(agent, color)
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
