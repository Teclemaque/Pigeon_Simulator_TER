<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pigeon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_soldat</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_blend = c_yellow
image_xscale = 0.1+random(0.05)-0.025;
image_yscale = 0.1+random(0.05)-0.025;

ds_list_add(global.grammaire,id);
/////////////////////Propriété de l'agent///////////////////////////

MSpeed = 5+random(2.5);//Vitesse maximale de deplacmement de l'agent
for (i = 0; i &lt; 15; i++)
    {
    Argument[i] = 0;
    ArgumentAttaque[i] = 0;
    }

Etat = 1;// 1 Vivant, 0 blesser, -1 mort

Fonction = 0;
Classe = 1;//0 simple soldat, 1 officier, 2 messager,....
Camp = 1;//Allié ou ennemi

Moral = random(200)-100;//Valeur moral &gt; 0 mec bien, &lt; 0 mec pas bien, = 0 deserteur

Combat = round(random(2));//Type de combat

Cadence = 0;//Vitesse de déplacement souhaitée

Commandant = id;//officier directe,
Officier = id;//officier referant,

Officiel = 0;
Grade = 0;//Rang de l'officier
Cible = noone;
CIBLE = noone;//La cible humaine a attaquer
MODE = "REPOS";

PousseToi = 0;
Evitement = 0;
/////////////////////Gestion environnement//////////////////////////
Z0 = 0;
ZC1 = 0;
ZC = 0; 
ZC2 = 0;

Alpha = 10;
AlphaMax = 20;

Dir1 = 0;
Dir2 = 0;
Dir = 0;

///////////////////////////////////////////////////////////////////
Ordre = 0;
Chance = random(100);//Variable qui indique si l'agent va mourir ou non

////////////////////////////////////////////////////////////////////
Contact = 0//Indique que l'agent touche quelqu'un d'autre
A = noone;//Autre Agent sélectionné pour d'eventuelle action
xx = x;//Pour eviter que l'agent se prenne en compte, lors des perceptions il sera deplacé loin et les calculs seront fait a partir de ses anciennes coordonnés
t = 0;//timer

Argument[0] = 1;
Execute = IA_Repos//IA_Deplacement(noone,noone,noone,point_direction(x,y,mouse_x,mouse_y),-1,0,0,0,1)//IA_Repos(0);//Le script a executer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Si je suis un simple soldat et que je suis tué alors 
je me désactive de la liste Regiment de mon officier
*/ 
if Classe == 0
    {
    if instance_exists(Officier)
        {
        ds_list_delete(Officier.Regiment,ds_list_find_index(Officier.Regiment,id));
        }
    }

ds_list_delete(global.grammaire,ds_list_find_index(global.grammaire,id))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &lt; view_xview[0] || x &gt; view_xview[0]+view_wview[0] || y &lt; view_yview[0] || y &gt; view_yview[0]+view_hview[0])
    {
    visible = false
    }
else
    {
    visible = true
    }

Chance = random(100);

if Execute != noone
    {
    script_execute(Execute,Argument);
    }

    
/////////////////////////////// REFLEXE ////////////////////////////
xx = x;
x = - 5000
A = instance_nearest(xx+lengthdir_x(1, direction),y+lengthdir_y(1, direction),obj_agent);
x = xx;

Agent = collision_circle(x+lengthdir_x(Cadence, direction),y+lengthdir_y(Cadence, direction),1,A,0,1)

if instance_exists(Agent)
&amp;&amp; distance_to_object(Agent) &lt; Cadence///MSpeed
&amp;&amp; Agent.id != id
    {
    //Agent = collision_circle(x+lengthdir_x(Cadence, direction),y+lengthdir_y(Cadence, direction),1,A,0,1)
    
    if Cadence == 0
        {
        Cadence = MSpeed/100
        }
    if instance_exists(Agent)
        {
        //Agent.Contact = 1
        
        if abs((Agent.direction mod 180)- direction mod 180) &gt; 90
            {
            Dir = Dir+20/(distance_to_object(Agent)+1)
            //Dir2 = Dir1-Enervement//90+(Agent.direction-direction)//random(Enervement)-Enervement/2
            if Grade &lt; Agent.Grade
                {
                PousseToi = 1;
                }
            else
                {
                if Grade == Agent.Grade
                    {
                    if Ordre &lt; Agent.Ordre
                        {
                        PousseToi = 1;
                        }
                    else
                        {
                        if Ordre == Agent.Ordre
                            {
                            if id &gt; Agent.id
                                {
                                PousseToi = 1;
                                }
                            }
                        }
                    }
                }
            }
        else
            {
            Dir = Dir+45/(distance_to_object(Agent)+1)

            if Grade &lt; Agent.Grade
                {
                PousseToi = 1;
                }
            else
                {
                if Grade == Agent.Grade
                    {
                    if Ordre &lt; Agent.Ordre
                        {
                        PousseToi = 1;
                        }
                    else
                        {
                        if Ordre == Agent.Ordre
                            {
                            if id &gt; Agent.id
                                {
                                PousseToi = 1;
                                }
                            }
                        }
                    }
                }
            }
        }
    else
        {
        if Evitement == 0
            {
            if abs(Dir-Dir1) &gt; 90/(Cadence+1)
                {
                if Dir-Dir1 &lt; 0
                    {
                    Dir += 90/(Cadence+1)
                    }
                else
                    {
                    Dir -= 90/(Cadence+1)
                    }
                }
            else
                {
                Dir = Dir1;
                }
            }
        PousseToi = 0;
        }
    }
else
    {
    if Evitement == 0
        {
        if abs(Dir-Dir1) &gt; 90/(Cadence+1)
            {
            if Dir-Dir1 &lt; 0
                {
                Dir += 90/(Cadence+1)
                }
            else
                {
                Dir -= 90/(Cadence+1)
                }
            }
        else
            {
            Dir = Dir1;
            }
        }
    PousseToi = 0;
    }
    
/*if Dir &lt; 0
    {
    Dir = 360-Dir;
    }
Dir = Dir mod 360;*/

///////////////////////////// Deplacement terrain ///////////////////////////////////////
/*
Determination en fonction du type de terrain la hauteur maximale que peut franchir l'agent
*/
terrain = map_get_terrain(0)
if terrain != -4
    {
    if terrain == 0
        {
        AlphaMax = 20
        }
    else
        {
        if terrain == 1
            {
            AlphaMax = 10
            }
        else
            {
            AlphaMax = 5
            }
        }
    if Alpha != AlphaMax
        {
        Alpha = AlphaMax
        }
    }

/*
Determinatin de la possibilité de faire un déplacement en fonction des terrains voisins
*/
Z0 = 0;
ZC1 = 0;
ZC = 0;
ZC2 = 0;

if Cadence != 0
    {
    if (Dir &lt; 90 &amp;&amp; Dir &gt;= 0)
        {
        map_get_height_cone(2);
        
        if (abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0)
        &amp;&amp; (abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0)
            {
            Dir = Dir;
            if abs(abs(Z0)-abs(ZC)) &lt; Alpha &amp;&amp; ZC &gt; 0 
                {
                Dir = Dir;
                }
            else
                {
                if Dir &gt;= 45
                    {
                    Dir += (90-Dir)/4
                    }
                else
                    {
                    Dir -= (Dir - 0)/4
                    }
                }
            }
        else
            {
            if abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0
                {
                Dir += (90-Dir)/2
                }
            else
                {
                if abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0
                    {
                    Dir -= (Dir - 0)/2
                    }
                else
                    {
                    Evitement = 10;
                    Dir += 10;
                    Cadence = MSpeed/40;
                    }
                }
            }
        }
    else
        {
        if (Dir &lt; 180 &amp;&amp; Dir &gt;= 90)
            {
            map_get_height_cone(8);
            
            if (abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0)
            &amp;&amp; (abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0)
                {
                if abs(abs(Z0)-abs(ZC)) &lt; Alpha &amp;&amp; ZC &gt; 0 
                    {
                    Dir = Dir;
                    }
                else
                    {
                    if Dir &gt;= 135
                        {
                        Dir += (180-Dir)/4
                        }
                    else
                        {
                        Dir -= (Dir - 90)/4
                        }
                    }
                }
            else
                {
                if abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0
                    {
                    Dir += (180-Dir)/2
                    }
                else
                    {
                    if abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0
                        {
                        Dir -= (Dir - 90)/2
                        }
                    else
                        {
                        Evitement = 10;
                        Dir += 10;
                        Cadence = MSpeed/40;
                        }
                    }
                }
            }
        else
            {
            if (Dir &lt; 270 &amp;&amp; Dir &gt;= 180)
                {
                map_get_height_cone(6);
                
                if (abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0)
                &amp;&amp; (abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0)
                    {
                    if abs(abs(Z0)-abs(ZC)) &lt; Alpha &amp;&amp; ZC &gt; 0 
                        {
                        Dir = Dir;
                        }
                    else
                        {
                        if Dir &gt;= 225
                            {
                            Dir += (270-Dir)/4
                            }
                        else
                            {
                            Dir -= (Dir - 180)/4
                            }
                        }
                    }
                else
                    {
                    if abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0
                        {
                        Dir += (270-Dir)/2
                        }
                    else
                        {
                        if abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0
                            {
                            Dir -= (Dir - 180)/2
                            }
                        else
                            {
                            Evitement = 10;
                            Dir -= 10;
                            Cadence = MSpeed/40;
                            }
                        }
                    }
                }
            else
                {
                if (Dir &lt; 360 &amp;&amp; Dir &gt;= 270)
                    {
                    map_get_height_cone(4);
                    
                    if (abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0)
                    &amp;&amp; (abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0)
                        {
                        if abs(abs(Z0)-abs(ZC)) &lt; Alpha &amp;&amp; ZC &gt; 0 
                            {
                            Dir = Dir;
                            }
                        else
                            {
                            if Dir &gt;= 315
                                {
                                Dir += (360-Dir)/4
                                }
                            else
                                {
                                Dir -= (Dir - 270)/4
                                }
                            }
                        }
                    else
                        {
                        if abs(abs(Z0)-abs(ZC1)) &lt; Alpha &amp;&amp; ZC1 &gt; 0
                            {
                            Dir += (360-Dir)/2
                            }
                        else
                            {
                            if abs(abs(Z0)-abs(ZC2)) &lt; Alpha &amp;&amp; ZC2 &gt; 0
                                {
                                Dir -= (Dir - 270)/2
                                }
                            else
                                {
                                Evitement = 10;
                                Dir -= 10;
                                Cadence = MSpeed/40;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
else
    {
    Dir = Dir1
    }
    
/*if Z0 &lt; 0
    {
    instance_destroy();
    }*/
    
if Evitement &gt; 0
    {
    Evitement--;
    }
else
    {
    Evitement = 0; 
    }

if Dir &lt; 0
    {
    Dir = 360-Dir;
    }
    
direction = Dir mod 360
image_angle = direction;

VTerrain = Z0*Cadence/100;
speed = Cadence -VTerrain;//&lt;--Ralentissement du au terrain

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
