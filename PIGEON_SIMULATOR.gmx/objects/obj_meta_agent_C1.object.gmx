<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soldat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_agent_C1</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

for (i = 0; i &lt; 15;i++)
    {
    ArgumentRegiment[i] = 0;
    }
ExecuteRegiment = noone;

t = random(20);

Formation = noone;
Jeton = noone;
Officiel = 0;

Troupe = "";
Name = "";
Numero = "";
Commandant = id;//variable peu utile
Commandant_sup = Commandant;//Mon superieur
Officier = Commandant;//Qui commande le regiment, moi ou mon superieur

Regiment = ds_list_create();
Renseignement = ds_list_create();
ds_list_add(Regiment,id);

PerceptAgentEnnemi = ds_list_create();
PerceptAgentAllie = ds_list_create();
CibleAttaque = ds_list_create();

Message = ds_list_create();
Objectif = 0;

CibleRegiment = noone;

Classe = 1;
ORDRE = "AUCUN";

if Classe == 1
    {
    nomGroupe(id);
    }

Argument[0] = 0;
Argument[1] = random(180)+30;
Execute = IA_Repos

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Si le moral est encore bon je transmet mon régiment 
a un nouvel officier nommé par moi
*/

if Etat != 1
    {
    if (Etat == -1 &amp;&amp; Moral &gt; 25
    &amp;&amp; ds_list_size(Regiment) &gt; 2)
    or (Etat == 0 &amp;&amp; Officiel == 0)
        {
        transfertNouvelOfficier(id);
        }
    }
if Camp == -1
        {
        obj_Partie.nb_ennemi_tuer += 1
        show_debug_message(obj_Partie.nb_ennemi_tuer)
        }
    else
        {
        obj_Partie.nb_allie_tuer += 1
        show_debug_message(obj_Partie.nb_ennemi_tuer)
        }
//Je supprime toute mes listes d'officier 
ds_map_delete(obj_globVar.Regiments, Name)   
ds_list_destroy(Regiment);
ds_list_destroy(PerceptAgentEnnemi);
ds_list_destroy(PerceptAgentAllie);
ds_list_destroy(CibleAttaque);
ds_list_destroy(Renseignement);
ds_list_destroy(Message);

if instance_exists(Formation)
    {
    with(Formation)
        {
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
t++;
//ds_list_clear(PerceptAgentAllie);
//ds_list_clear(PerceptAgentEnnemi);
xx = x;//Pour éviter que l'agent puis se lister lui même, 
x = -50000;//eloignement de sa coordoné originelle

I = 0;
II = 0;

if t &gt; 20
&amp;&amp; ORDRE != "OBEISSANCE"
    {
    ds_list_clear(PerceptAgentAllie);
    ds_list_clear(PerceptAgentEnnemi);
    //Avant de faire ses perceptions, l'officier va desactiver son régiment
    if ds_exists(Regiment,ds_type_list)
        {
        for (i = 1; i &lt; ds_list_size(Regiment); i++)
            {
            instance_deactivate_object(ds_list_find_value(Regiment,i));
            }
        }
    Dist = 10;              
    IA_Perception();

    instance_activate_all();
    
    IA_PerceptionAllie();
    t = 0;
    }

x = xx;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Classe &lt;= 1
    {
    if Classe == 1
        {
        if Grade &gt;= 2 &amp;&amp; Officiel == 1 
        &amp;&amp; ((map_visible(Officier_supreme) == false &amp;&amp; obj_globVar.Temps mod 100 == 0)
        || obj_globVar.Temps mod 200 == 0)// Regulierement l'officier va essayer d'envoyer un rapport
            {
            if instance_exists(obj_messager_C1)
            &amp;&amp; distance_to_object(instance_nearest(x,y,Messager)) &lt; 25
                {
                messager = instance_nearest(x,y,Messager)
                messager.ArgumentMessager[] = 0;
                //1ère partie du rapport l'etat de sa troupe
                //ds_list_add(messager.Destinataire,obj_joueur);
                messager.ArgumentMessager[0] = Officier_supreme
                messager.ArgumentMessager[1] = "RAPPORT";
                messager.ArgumentMessager[2] = Name;
                messager.ArgumentMessager[3] = ds_list_size(Regiment);
                messager.ArgumentMessager[4] = x;
                messager.ArgumentMessager[5] = y;
                messager.ArgumentMessager[6] = obj_globVar.Temps;
                
                //2ème partie, tous les renseignements qu'il a obtenu
                for (i = 0; i &lt; ds_list_size(Renseignement);i++)
                    {
                    messager.ArgumentMessager[7+i] = ds_list_find_value(Renseignement,i);
                    }
                ds_list_add(messager.SaccocheMessage,messager.ArgumentMessager);

                messager.Message += 1;
                
                with(messager)
                    {
                    D = ds_list_find_value(SaccocheMessage,0)
                    Dest = D[0]
                    Execute = IA_Deplacement;
                    Argument[0] = noone;
                    Argument[1] = Dest;
                    Argument[2] = noone;
                    Argument[5] = -1;
                    Argument[6] = -1;
                    Argument[7] = MSpeed;
                    Argument[8] = 0;
                    Argument[9] = Alpha//round(random(8))+2;
                    Argument[10] = 1;
                    }
                messager.ArgumentMessager[] = 0;
                }
            }
        }
    if instance_exists(Commandant_sup)
    &amp;&amp; Commandant_sup.ORDRE == "GROUPE"
    &amp;&amp; Commandant_sup.id != id 
        {
        Officier = Commandant_sup;
        Classe = 0;
        ORDRE = "OBEISSANCE"
        
        if instance_exists(Formation)
            {
            with(Formation)
                {
                instance_destroy();
                }
            }
        ds_list_clear(Regiment);
        }
    else
        {
        if instance_exists(Commandant_sup)
        &amp;&amp; Commandant_sup.ORDRE == "SEPARATION"
            {
            Officier = Commandant
            Classe = 1;
            ORDRE = "AUCUN"
            }
        }
    if ORDRE = "SEPARATION"
    &amp;&amp; Chance &lt; 10
        {
        ds_list_clear(Regiment)
        ORDRE = "AUCUN"
        }
    
    if Classe == 1
        {
        if instance_exists(CIBLE) == false
            {
            MODE = "REPOS";
            }
        
        if Officiel != 1
            {
            if instance_exists(Formation)
                {
                with(Formation)
                    {
                    instance_destroy();
                    }
                }
           
            if ds_list_size(PerceptAgentEnnemi) != 0
                {
                //Renseignement, l'officier peut choisir ou non de faire remonter des informations
                Cible = ds_list_find_value(PerceptAgentEnnemi,0);
                
                if distance_to_object(Cible) &lt; 200
                    {
                    MODE = "ATTAQUE";
                    //if ds_list_size(Cible.Regiment) &lt; ds_list_size(Regiment)
                        {
                        ArgumentAttaque[0] = ds_list_find_value(Cible.Regiment,0/*ceil(random(ds_list_size(Cible.Regiment)))-1*/)
                        ArgumentAttaque[1] = Combat;
                        ArgumentAttaque[2] = 1;
                        ArgumentAttaque[3] = -1;
                        ArgumentAttaque[4] = -1;
                        Execute = IA_Attaque;
                        //IA_Attaque();
                        
                        /*for (i = 0; i &lt; ds_list_size(Cible.Regiment); i++)
                            {
                            ds_list_add(CibleAttaque,ds_list_find_value(Cible.Regiment,i))
                            }*/
                        //ds_list_add(CibleAttaque,Cible);
                                    
                        //ExecuteRegiment = IA_Attaque_Soldat;
                        //ArgumentRegiment = Argument;
                        /*Argument[2] = 1;
                        Argument[3] = -1;
                        Argument[4] = -1;*/
                        }
                    }
                }
            else
                {
                /*if Chance &lt; 5
                or instance_exists(CIBLE) == false
                    {
                    MODE = "REPOS";
                    Argument[0] = 0
                    Argument[1] = random(180);
                    IA_Repos();
                    }*/
                }
                
            }
        else
            {
            if instance_exists(Formation) == false
                {
                Formation = instance_create(x,y,obj_formation)
                }
            else
                {
                with(Formation)
                    {
                    direction = other.Dir1 mod 90;
                    
                    image_xscale = round(sqrt(ds_list_size(other.Regiment)));
                    image_yscale = round(sqrt(ds_list_size(other.Regiment)));
                    ID = other.id;
                    x = other.x+50//*(cos(degtorad(direction)))//+random(10)-5;
                    y = other.y-50//*(sin(degtorad(direction)))//+random(10)-5;
                    }
                }
            if MODE == "ATTAQUE"
                {
                if instance_exists(CIBLE) == false
                    {
                    MODE = "REPOS";
                    Argument[0] = 0
                    Argument[1] = random(180);
                    Execute = IA_Repos;
                    }
                }
            }
        }
    /*if abs(Moral) &gt; 25
        {
        if Objectif != 1
            {
            if ds_list_empty(Message) == false
                {
                show_debug_message("Ordre en attente "+string(ds_list_size(Message)));
                Objectif = 1
                Ord[] = ds_list_find_value(Message, 0);
                Execute = Ord[0];
                for (i = 1; i &lt; array_length_1d(Ord); i++)
                    {
                    Argument[i] = Ord[i];
                    }
                Objectif = 1;
                }
            }
        }
    if Objectif == 0
        {
        ds_list_delete(Message, 0);
        }*/
    }


event_inherited()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(x,y,Name)
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
