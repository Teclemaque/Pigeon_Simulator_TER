<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>transparent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initaliser au coin haut-gauche de l'écran
x = 0;
y = 0;

x = view_xview[view_current];
y = view_yview[view_current];

Groupes = ds_list_create(); // liste des selections enregistrées

var startx = global.Dimensions[? "startx"]
// bouton "+"
add_btn_x1 = x +  (startx - sprite_get_width(spr_icon_plus)) / 1.75; // centrer le bouton
add_btn_x2 = x +  (startx - sprite_get_width(icone_strategie_avatar)) / 2.25;
add_btn_y = y + 50;

instance_create(add_btn_x2, add_btn_y, obj_icone_avatar);

instance_create(add_btn_x1, add_btn_y+32, obj_btn_plus);

// redimensionner le sprite pour gérer le onClick
image_xscale = startx / sprite_width;
image_yscale = room_width / sprite_height;

// Params pour dessin des rectangles des groupes
rect_x = 16;
rect_y = 64;
rect_max_x = startx;
width = rect_max_x - rect_x
rect_padding = 16;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message("clicked");

if( is_clicked(add_btn_x1, add_btn_y, spr_icon_plus) ){
    //show_debug_message("+");
    // envoyer la selection à la toolbox pour affichage dans la TextBar
    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rectangle de fond
draw_set_colour(c_orange)
x = view_xview[view_current];
y = view_yview[view_current];
draw_rectangle(x, y, x + global.Dimensions[? "startx"], room_height, 0)

if instance_exists(obj_joueur)
    {
    /*for (i = 0; i &lt; ds_list_size(obj_joueur.Regiment);i++)
        {
        draw_sprite_ext(spr_jeton,-1,x+30,y+i*40+250,0.7,0.7,0,c_blue,1)
        }*/
    I1 = 0;
    I2 = 0;
    for (i = 0; i &lt; ds_list_size(obj_joueur.Regiment);i++)
        {
        A = ds_list_find_value(obj_joueur.Regiment,i)
        if A != undefined
            {
            if ds_list_find_index(obj_joueur.RegimentAllie,A) != -1
                {
                draw_sprite_ext(spr_jeton,-1,x+30,y+I1*40+250,0.7,0.7,0,c_blue,1)
                I1++;
                }
            else
                {
                if ds_list_find_index(obj_joueur.RegimentEnnemi,A) != -1
                    {
                    draw_sprite_ext(spr_jeton,-1,x+90,y+I2*40+250,0.7,0.7,0,c_blue,1)
                    I2++
                    }
                }
            }
        }
    /*for (i = 0; i &lt; ds_list_size(obj_joueur.RegimentAllie);i++)
        {
        draw_sprite_ext(spr_jeton,-1,x+30,y+i*40+250,0.7,0.7,0,c_blue,1)
        }
    for (i = 0; i &lt; ds_list_size(obj_joueur.RegimentEnnemi);i++)
        {
        draw_sprite_ext(spr_jeton,-1,x+90,y+i*40+250,0.7,0.7,0,c_blue,1)
        }*/
    /*for (i = 0; i &lt; ds_list_size(obj_joueur.Regiment);i++)
        {
        A = ds_list_find_value(obj_joueur.Regiment,i)
        
        if A != undefined
        //&amp;&amp; instance_exists(A)
            {
            if A.Camp != obj_joueur.Camp
                {
                draw_sprite_ext(spr_jeton,-1,x+30,y+i*40+250,0.7,0.7,0,c_red,1)
                }
            else
                {
                draw_sprite_ext(spr_jeton,-1,x+30,y+i*40+250,0.7,0.7,0,c_blue,1)
                }
           }
        }*/
    }
// Bouton "+"
//draw_sprite(spr_icon_plus, 0, add_btn_x, add_btn_y)

// Groupes d'unités
//  --------------
// |  Nom groupe |
// |  X o o o o  |
//  -------------
/*
for(var i = 0; i &lt; ds_list_size(Groupes); i++){
    var rect_height = draw_group_rectangle(rect_x, rect_y, rect_x + width - rect_padding, ds_list_find_value(Groupes, i));
    rect_y += rect_height + rect_padding;
}
*/
    
/* // rectangle de debug
draw_set_colour(c_blue)
draw_rectangle(x + 5, x + 5, sprite_width - 5, sprite_height - 5, 1)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
