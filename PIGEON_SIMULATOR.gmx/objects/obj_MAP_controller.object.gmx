<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arme</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MAP_Create2();
MAP_Draw2();
instance_create(x,y,obj_FOG_controller);
instance_create(x,y,Obj_mini_map_controler);

flag_debug = 0

for (j = 1; j &lt; 768/blockSize+1; j++)
    {
    for (i = 1; i &lt; 1024/blockSize+1; i++)
        {
        P = instance_position((i)*blockSize,(j)*blockSize,Obj_Terrain)

        if P != noone
            {
            with(P)
                {
                if (map_get_terrain(0) != 1 &amp;&amp; map_get_terrain(0) != 3)
                &amp;&amp; ((map_get_terrain(1) == 1 || map_get_terrain(1) == 3)
                || (map_get_terrain(2) == 1 || map_get_terrain(2) == 3)
                || (map_get_terrain(3) == 1 || map_get_terrain(3) == 3)
                || (map_get_terrain(4) == 1 || map_get_terrain(4) == 3)
                || (map_get_terrain(5) == 1 || map_get_terrain(5) == 3)
                || (map_get_terrain(6) == 1 || map_get_terrain(6) == 3)
                || (map_get_terrain(7) == 1 || map_get_terrain(7) == 3)
                || (map_get_terrain(8) == 1 || map_get_terrain(8) == 3))
                    {
                    instance_create((other.i-1)*other.blockSize,(other.j-1)*other.blockSize,Obj_Balise_Obstacle)
                    }
                }
            }
        }
    }
ID = 0;

for (j = 0; j &lt; 768/blockSize; j++)
    {
    for (i = 0; i &lt; 1024/blockSize; i++)
        {
        
        P = instance_position(i*blockSize,j*blockSize,Obj_Balise_Obstacle)
        
        if P != noone
            {
            if P.ID == -1
                {
                if map_get_terrain(7) == 1
                || map_get_terrain(7) == 3
                    {
                    P.ID = ID;
                    }
                else
                    {
                    A = instance_position(i*blockSize,(j-1)*blockSize, Obj_Balise_Obstacle)
                    B = instance_position(i*blockSize,(j+1)*blockSize, Obj_Balise_Obstacle)
                    C = instance_position((i-1)*blockSize,j*blockSize, Obj_Balise_Obstacle)
                    D = instance_position((i+1)*blockSize,j*blockSize, Obj_Balise_Obstacle)
                    E = instance_position((i-1)*blockSize,(j-1)*blockSize, Obj_Balise_Obstacle)
                    F = instance_position((i+1)*blockSize,(j+1)*blockSize, Obj_Balise_Obstacle)
                    G = instance_position((i-1)*blockSize,(j+1)*blockSize, Obj_Balise_Obstacle)
                    H = instance_position((i+1)*blockSize,(j-1)*blockSize, Obj_Balise_Obstacle)
                    
                    if (A != noone &amp;&amp; A.ID != -1)
                    || (B != noone &amp;&amp; B.ID != -1)
                    || (C != noone &amp;&amp; C.ID != -1)
                    || (D != noone &amp;&amp; D.ID != -1)
                    || (E != noone &amp;&amp; E.ID != -1)
                    || (F != noone &amp;&amp; F.ID != -1)
                    || (G != noone &amp;&amp; G.ID != -1)
                    || (H != noone &amp;&amp; H.ID != -1)
                        {
                        if (A != noone &amp;&amp; A.ID != -1)
                            {
                            P.ID = A.ID
                            }
                        else
                        if (B != noone &amp;&amp; B.ID != -1)
                            {
                            P.ID = B.ID
                            }
                        else
                        if (C != noone &amp;&amp; C.ID != -1)
                            {
                            P.ID = C.ID
                            }
                        else
                        if (D != noone &amp;&amp; D.ID != -1)
                            {
                            P.ID = D.ID
                            }
                        if (E != noone &amp;&amp; E.ID != -1)
                            {
                            P.ID = E.ID
                            }
                        else
                        if (F != noone &amp;&amp; F.ID != -1)
                            {
                            P.ID = F.ID
                            }
                        else
                        if (G != noone &amp;&amp; G.ID != -1)
                            {
                            P.ID = G.ID
                            }
                        else
                        if (H != noone &amp;&amp; H.ID != -1)
                            {
                            P.ID = H.ID
                            }
                        }
                    else
                        {
                        P.ID = ID;
                        ID ++;
                        }
                    }
                
                with(P)
                    {
                    generation_balise(other.i*other.blockSize,other.j*other.blockSize)
                    }
                }
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_lshift){
    if(toggle_papper == 0){
        toggle_papper = 1
        view_wview[0] = room_width 
        view_hview[0] = room_height
        view_xview[0] = 0
        view_yview[0] = 0
    } else {
        toggle_papper = 0
        view_xview[0] = obj_VIEW_controller.mem_xview 
        view_yview[0] = obj_VIEW_controller.mem_yview
        view_wview[0] = obj_VIEW_controller.mem_wview
        view_hview[0] = obj_VIEW_controller.mem_hview
    }
}

if(keyboard_check(vk_control) and keyboard_check(ord('S')) and flag_debug == 0){
    flag_debug = 1
    show_debug_message("seed : " + string(seed))    
} else if (keyboard_check_released(vk_control) or keyboard_check_released(ord('S'))){
    flag_debug = 0
}


/*
if mouse_check_button(mb_right){
    map_get_papper()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
